# Задание 1.
e - Соответствующий заданию кортеж
```
snd (fst e)
```

# Задание 2.
e - Соответствующий заданию список
```
1) head (tail [e])

2) head (tail (head e))

3) head (tail (head (tail e)))

4) head (head (tail e))
```


# Задание 3.

1) [1, 3 .. 39]
2) [2 * n + 1 | n <- [0 .. 19]]
3) [2 * n + 1 | n <- [0..19]]
4) filter odd [1..40]
5) take 20 [n | n <- [1 .. ], odd n ]
6) take 20 (map (\n -> 2 * n + 1) [0..])
7) take 20 (filter odd [1..])
8) take 20 (iterate (+2) 1)
9) take 20 [1, 3..]
10) 
generateOdd :: Int -> Int -> [Int]
generateOdd _ 0 = []
generateOdd current n = (2 * current - 1) : generateOdd (current + 1) (n - 1)

generateOdd 1 20


# Задание 4.
1)
```
[n * (n + 1) `div` 2 | n <- [1 .. 50]]
```
2)
```
take 50 [k * (k + 1) `div` 2 | k <- [1..]]
```
3)
```
getTriangleIntegers :: Integer -> Integer
getTriangleIntegers e = div (e * (e + 1)) 2

take 50 (map getTriangleIntegers [1..])
```

# Задание 5.
-- Треугольные пирамидальные числа
1) [(n^3 + 3 * n^2 + 2 * n) `div` 6 | n <- [1 .. 50]]
2) take 50 [n * (n + 1) * (n + 2) `div` 6 | n <- [1..]]
3) div (e * (e + 1) * (e + 2)) 6

-- Квадратные пирамидальные числа
1) [(x * (x + 1) * (2 * x + 1)) `div` 6 | x <- [1..50]]
2) take 50 [n * (n + 1) * (2 * n + 1) `div` 6 | n <- [1..]]
3) div (e * (e + 1) * (2 * e + 1)) 6
